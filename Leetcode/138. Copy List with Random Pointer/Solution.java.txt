/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        Map<Node,Integer> map = new HashMap<>();
        Map<Node,Node> history = new HashMap<>();
        Node dummy = new Node(0);
        Node copied = dummy;
        Node temp = head;
        int i=0;
        while(temp!=null)
        {
            map.put(temp,i++);
            temp = temp.next;
        }
        temp = head;
        while(temp!=null)
        {
            dummy.next = new Node(temp.val);
            history.put(temp,dummy.next);
            dummy=dummy.next;
            temp = temp.next;
        }
        dummy = copied.next;
        temp = head;
        while(temp!=null)
        {
            if(temp.random!=null)
            {
                dummy.random = history.get(temp.random);
            }
            dummy=dummy.next;
            temp = temp.next;
        }
        return copied.next;
    }
}